
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser1() {super();}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\026\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\027\003\000\002\031\003\000" +
    "\002\031\005\000\002\032\003\000\002\032\005\000\002" +
    "\032\004\000\002\033\003\000\002\033\005\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\005" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\004\000\002\023\003\000\002" +
    "\023\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\030\003\000\002\030\003\000\002\043" +
    "\005\000\002\043\006\000\002\043\007\000\002\063\005" +
    "\000\002\063\003\000\002\035\003\000\002\035\003\000" +
    "\002\036\003\000\002\036\004\000\002\036\003\000\002" +
    "\036\003\000\002\037\006\000\002\037\006\000\002\037" +
    "\007\000\002\037\007\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\040\005\000\002\040\004\000\002\040\005\000\002" +
    "\041\004\000\002\041\003\000\002\062\003\000\002\061" +
    "\005\000\002\061\003\000\002\046\011\000\002\046\012" +
    "\000\002\051\004\000\002\017\007\000\002\020\004\000" +
    "\002\020\003\000\002\021\010\000\002\021\010\000\002" +
    "\021\007\000\002\047\010\000\002\050\014\000\002\007" +
    "\003\000\002\052\003\000\002\053\003\000\002\010\006" +
    "\000\002\010\004\000\002\044\003\000\002\024\005\000" +
    "\002\025\005\000\002\060\004\000\002\011\002\000\002" +
    "\011\004\000\002\013\002\000\002\013\005\000\002\012" +
    "\002\000\002\012\004\000\002\014\005\000\002\015\005" +
    "\000\002\015\010\000\002\015\006\000\002\022\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\042\007\000\002\042" +
    "\007\000\002\042\007\000\002\054\007\000\002\054\007" +
    "\000\002\054\005\000\002\055\003\000\002\056\007\000" +
    "\002\056\007\000\002\057\005\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\006\003\005\040\006\001\002\000\004\002" +
    "\343\001\002\000\004\062\337\001\002\000\004\062\007" +
    "\001\002\000\006\003\010\050\011\001\002\000\010\036" +
    "\uffa8\041\uffa8\044\012\001\002\000\010\036\uffa8\041\uffa8" +
    "\044\012\001\002\000\010\036\uffa6\041\uffa6\062\323\001" +
    "\002\000\006\036\uffa4\041\021\001\002\000\004\047\015" +
    "\001\002\000\004\002\uff98\001\002\000\006\036\uffa4\041" +
    "\021\001\002\000\004\036\047\001\002\000\006\036\uffa8" +
    "\044\012\001\002\000\016\024\026\025\022\026\024\027" +
    "\027\030\025\062\023\001\002\000\006\050\uff9b\062\uff9b" +
    "\001\002\000\004\003\042\001\002\000\006\050\uff9c\062" +
    "\uff9c\001\002\000\006\050\uff9d\062\uff9d\001\002\000\006" +
    "\050\uff9a\062\uff9a\001\002\000\006\050\uff99\062\uff99\001" +
    "\002\000\004\062\031\001\002\000\010\036\uffa1\044\uffa1" +
    "\052\032\001\002\000\014\024\026\025\022\026\024\027" +
    "\027\030\025\001\002\000\004\053\041\001\002\000\004" +
    "\062\036\001\002\000\006\050\uff9e\062\uff9e\001\002\000" +
    "\006\046\037\053\uffad\001\002\000\014\024\026\025\022" +
    "\026\024\027\027\030\025\001\002\000\004\053\uffae\001" +
    "\002\000\006\036\uffa0\044\uffa0\001\002\000\004\050\043" +
    "\001\002\000\006\036\uff9f\044\uff9f\001\002\000\004\050" +
    "\320\001\002\000\004\036\047\001\002\000\004\042\315" +
    "\001\002\000\024\031\056\033\052\034\073\036\047\043" +
    "\054\057\057\060\051\062\060\067\055\001\002\000\006" +
    "\003\313\043\314\001\002\000\004\052\303\001\002\000" +
    "\030\004\122\005\100\020\105\052\106\054\107\055\117" +
    "\056\123\061\110\062\060\063\121\074\103\001\002\000" +
    "\036\003\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5" +
    "\043\uffc5\057\uffc5\060\uffc5\062\uffc5\065\uffc5\066\uffc5\067" +
    "\uffc5\071\uffc5\001\002\000\042\003\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\036\uffc3\042\uffc3\043\uffc3\047\uffc3\057" +
    "\uffc3\060\uffc3\062\uffc3\065\uffc3\066\uffc3\067\uffc3\071\uffc3" +
    "\001\002\000\004\062\250\001\002\000\004\052\227\001" +
    "\002\000\004\052\214\001\002\000\062\003\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\035\ufffa\045\ufffa\046\ufffa\050\ufffa\051\ufffa\052" +
    "\202\053\ufffa\064\ufffa\001\002\000\036\003\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\036\uffcf\043\uffcf\057\uffcf\060" +
    "\uffcf\062\uffcf\065\uffcf\066\uffcf\067\uffcf\071\uffcf\001\002" +
    "\000\036\003\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\036" +
    "\uffd2\043\uffd2\057\uffd2\060\uffd2\062\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\071\uffd2\001\002\000\036\003\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\036\uffce\043\uffce\057\uffce\060\uffce" +
    "\062\uffce\065\uffce\066\uffce\067\uffce\071\uffce\001\002\000" +
    "\036\003\uffc0\031\056\032\uffc0\033\052\034\073\036\047" +
    "\043\uffc0\057\057\060\051\062\060\065\uffc0\066\uffc0\067" +
    "\055\071\uffc0\001\002\000\036\003\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\036\uffc8\043\uffc8\057\uffc8\060\uffc8\062" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\071\uffc8\001\002\000\004" +
    "\050\200\001\002\000\036\003\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\036\uffd1\043\uffd1\057\uffd1\060\uffd1\062\uffd1" +
    "\065\uffd1\066\uffd1\067\uffd1\071\uffd1\001\002\000\036\003" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\043\uffc7" +
    "\057\uffc7\060\uffc7\062\uffc7\065\uffc7\066\uffc7\067\uffc7\071" +
    "\uffc7\001\002\000\010\010\164\045\163\051\165\001\002" +
    "\000\036\003\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\036" +
    "\uffc9\043\uffc9\057\uffc9\060\uffc9\062\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\071\uffc9\001\002\000\004\062\076\001\002\000" +
    "\036\003\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6" +
    "\043\uffc6\057\uffc6\060\uffc6\062\uffc6\065\uffc6\066\uffc6\067" +
    "\uffc6\071\uffc6\001\002\000\036\003\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\036\uffd3\043\uffd3\057\uffd3\060\uffd3\062" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\071\uffd3\001\002\000\004" +
    "\021\077\001\002\000\030\004\122\005\100\020\105\052" +
    "\106\054\107\055\117\056\123\061\110\062\060\063\121" +
    "\074\103\001\002\000\024\020\uffff\052\uffff\054\uffff\055" +
    "\uffff\056\uffff\061\uffff\062\uffff\063\uffff\074\uffff\001\002" +
    "\000\054\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\021\uffed\022\uffed\023\uffed\035\uffed\046\uffed\050" +
    "\uffed\053\uffed\064\uffed\001\002\000\004\035\153\001\002" +
    "\000\054\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\021\uffee\022\uffee\023\uffee\035\uffee\046\uffee\050" +
    "\uffee\053\uffee\064\uffee\001\002\000\004\035\uffb0\001\002" +
    "\000\024\020\105\052\106\054\107\055\117\056\123\061" +
    "\110\062\060\063\121\074\103\001\002\000\030\004\122" +
    "\005\100\020\105\052\106\054\107\055\117\056\123\061" +
    "\110\062\060\063\121\074\103\001\002\000\054\003\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec" +
    "\022\uffec\023\uffec\035\uffec\046\uffec\050\uffec\053\uffec\064" +
    "\uffec\001\002\000\054\003\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\035\ufffe" +
    "\046\ufffe\050\ufffe\053\ufffe\064\ufffe\001\002\000\044\003" +
    "\ufff9\004\140\005\134\010\142\011\145\012\136\013\137" +
    "\014\141\015\133\016\ufff9\017\ufff9\021\135\035\ufff9\046" +
    "\ufff9\050\ufff9\053\ufff9\064\ufff9\001\002\000\054\003\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\035\ufff4\046\ufff4\050\ufff4\053\ufff4\064" +
    "\ufff4\001\002\000\054\003\ufff7\004\ufff7\005\ufff7\006\125" +
    "\007\127\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\021\ufff7\022\126\023\130\035\ufff7" +
    "\046\ufff7\050\ufff7\053\ufff7\064\ufff7\001\002\000\054\003" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\035\ufff0\046\ufff0\050\ufff0\053\ufff0" +
    "\064\ufff0\001\002\000\054\003\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\035" +
    "\ufff1\046\ufff1\050\ufff1\053\ufff1\064\ufff1\001\002\000\024" +
    "\020\105\052\106\054\107\055\117\056\123\061\110\062" +
    "\060\063\121\074\103\001\002\000\054\003\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\035\uffeb\046\uffeb\050\uffeb\053\uffeb\064\uffeb\001" +
    "\002\000\054\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\035\ufff2\046\ufff2" +
    "\050\ufff2\053\ufff2\064\ufff2\001\002\000\054\003\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\035\uffe9\046\uffe9\050\uffe9\053\uffe9\064\uffe9" +
    "\001\002\000\024\020\000\052\000\054\000\055\000\056" +
    "\000\061\000\062\000\063\000\074\000\001\002\000\054" +
    "\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\035\uffe8\046\uffe8\050\uffe8\053" +
    "\uffe8\064\uffe8\001\002\000\054\003\ufff5\004\ufff5\005\ufff5" +
    "\006\125\007\127\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022\126\023\130" +
    "\035\ufff5\046\ufff5\050\ufff5\053\ufff5\064\ufff5\001\002\000" +
    "\024\020\uffe5\052\uffe5\054\uffe5\055\uffe5\056\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\074\uffe5\001\002\000\024\020\uffe2\052" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\074\uffe2\001\002\000\024\020\uffe4\052\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\061\uffe4\062\uffe4\063\uffe4\074\uffe4\001\002" +
    "\000\024\020\uffe3\052\uffe3\054\uffe3\055\uffe3\056\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\074\uffe3\001\002\000\024\020\105" +
    "\052\106\054\107\055\117\056\123\061\110\062\060\063" +
    "\121\074\103\001\002\000\054\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\035\ufff3\046\ufff3\050\ufff3\053\ufff3\064\ufff3\001\002\000" +
    "\030\004\uffdc\005\uffdc\020\uffdc\052\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\061\uffdc\062\uffdc\063\uffdc\074\uffdc\001\002\000" +
    "\024\020\uffe6\052\uffe6\054\uffe6\055\uffe6\056\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\074\uffe6\001\002\000\030\004\uffdb\005" +
    "\uffdb\020\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb\061\uffdb" +
    "\062\uffdb\063\uffdb\074\uffdb\001\002\000\030\004\uffde\005" +
    "\uffde\020\uffde\052\uffde\054\uffde\055\uffde\056\uffde\061\uffde" +
    "\062\uffde\063\uffde\074\uffde\001\002\000\030\004\uffdf\005" +
    "\uffdf\020\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\074\uffdf\001\002\000\024\020\uffe7\052" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\074\uffe7\001\002\000\030\004\uffdd\005\uffdd\020\uffdd\052" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\061\uffdd\062\uffdd\063\uffdd" +
    "\074\uffdd\001\002\000\030\004\uffe1\005\uffe1\020\uffe1\052" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\074\uffe1\001\002\000\030\004\122\005\100\020\105\052" +
    "\106\054\107\055\117\056\123\061\110\062\060\063\121" +
    "\074\103\001\002\000\024\020\105\052\106\054\107\055" +
    "\117\056\123\061\110\062\060\063\121\074\103\001\002" +
    "\000\030\004\uffe0\005\uffe0\020\uffe0\052\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\061\uffe0\062\uffe0\063\uffe0\074\uffe0\001\002" +
    "\000\054\003\ufff6\004\ufff6\005\ufff6\006\125\007\127\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\021\ufff6\022\126\023\130\035\ufff6\046\ufff6\050" +
    "\ufff6\053\ufff6\064\ufff6\001\002\000\026\003\ufff8\004\140" +
    "\005\134\016\ufff8\017\ufff8\035\ufff8\046\ufff8\050\ufff8\053" +
    "\ufff8\064\ufff8\001\002\000\004\053\151\001\002\000\054" +
    "\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\021\uffef\022\uffef\023\uffef\035\uffef\046\uffef\050\uffef\053" +
    "\uffef\064\uffef\001\002\000\054\003\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\021\uffea\022\uffea\023\uffea" +
    "\035\uffea\046\uffea\050\uffea\053\uffea\064\uffea\001\002\000" +
    "\030\004\uffb1\005\uffb1\020\uffb1\052\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\061\uffb1\062\uffb1\063\uffb1\074\uffb1\001\002\000" +
    "\030\004\122\005\100\020\105\052\106\054\107\055\117" +
    "\056\123\061\110\062\060\063\121\074\103\001\002\000" +
    "\004\064\uffaf\001\002\000\004\064\157\001\002\000\022" +
    "\031\056\033\052\034\073\036\047\057\057\060\051\062" +
    "\060\067\055\001\002\000\004\065\161\001\002\000\004" +
    "\050\162\001\002\000\036\003\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\036\uffb2\043\uffb2\057\uffb2\060\uffb2\062\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\071\uffb2\001\002\000\032\003" +
    "\175\004\122\005\100\020\105\052\106\054\107\055\117" +
    "\056\123\061\110\062\060\063\121\074\103\001\002\000" +
    "\004\003\171\001\002\000\004\003\166\001\002\000\030" +
    "\004\122\005\100\020\105\052\106\054\107\055\117\056" +
    "\123\061\110\062\060\063\121\074\103\001\002\000\004" +
    "\050\170\001\002\000\036\003\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\036\uffca\043\uffca\057\uffca\060\uffca\062\uffca" +
    "\065\uffca\066\uffca\067\uffca\071\uffca\001\002\000\030\004" +
    "\122\005\100\020\105\052\106\054\107\055\117\056\123" +
    "\061\110\062\060\063\121\074\103\001\002\000\004\050" +
    "\173\001\002\000\036\003\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\036\uffcb\043\uffcb\057\uffcb\060\uffcb\062\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\071\uffcb\001\002\000\004\050\177" +
    "\001\002\000\004\050\176\001\002\000\036\003\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\043\uffcc\057\uffcc" +
    "\060\uffcc\062\uffcc\065\uffcc\066\uffcc\067\uffcc\071\uffcc\001" +
    "\002\000\036\003\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\036\uffcd\043\uffcd\057\uffcd\060\uffcd\062\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\071\uffcd\001\002\000\036\003\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\036\uffd0\043\uffd0\057\uffd0\060" +
    "\uffd0\062\uffd0\065\uffd0\066\uffd0\067\uffd0\071\uffd0\001\002" +
    "\000\016\003\uffc1\032\uffc1\043\uffc1\065\uffc1\066\uffc1\071" +
    "\uffc1\001\002\000\032\004\122\005\100\020\105\052\106" +
    "\053\205\054\107\055\117\056\123\061\110\062\060\063" +
    "\121\074\103\001\002\000\010\003\uffac\046\uffac\053\uffac" +
    "\001\002\000\010\003\uffd4\046\212\053\uffd4\001\002\000" +
    "\054\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\035\uffd8\046\uffd8\050\uffd8" +
    "\053\uffd8\064\uffd8\001\002\000\006\003\210\053\207\001" +
    "\002\000\054\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\035\uffd7\046\uffd7" +
    "\050\uffd7\053\uffd7\064\uffd7\001\002\000\004\050\211\001" +
    "\002\000\054\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\035\uffd6\046\uffd6" +
    "\050\uffd6\053\uffd6\064\uffd6\001\002\000\030\004\122\005" +
    "\100\020\105\052\106\054\107\055\117\056\123\061\110" +
    "\062\060\063\121\074\103\001\002\000\006\003\uffd5\053" +
    "\uffd5\001\002\000\010\003\216\056\123\063\121\001\002" +
    "\000\006\046\224\053\uff8e\001\002\000\004\053\222\001" +
    "\002\000\004\053\220\001\002\000\004\050\221\001\002" +
    "\000\036\003\uff91\031\uff91\032\uff91\033\uff91\034\uff91\036" +
    "\uff91\043\uff91\057\uff91\060\uff91\062\uff91\065\uff91\066\uff91" +
    "\067\uff91\071\uff91\001\002\000\004\050\223\001\002\000" +
    "\036\003\uff90\031\uff90\032\uff90\033\uff90\034\uff90\036\uff90" +
    "\043\uff90\057\uff90\060\uff90\062\uff90\065\uff90\066\uff90\067" +
    "\uff90\071\uff90\001\002\000\004\062\225\001\002\000\004" +
    "\053\ufffa\001\002\000\004\053\uff8f\001\002\000\030\004" +
    "\122\005\100\020\105\052\106\054\107\055\117\056\123" +
    "\061\110\062\060\063\121\074\103\001\002\000\010\016" +
    "\uffbf\017\uffbf\053\uffbf\001\002\000\010\016\244\017\246" +
    "\053\uffbd\001\002\000\004\053\233\001\002\000\022\031" +
    "\056\033\052\034\073\036\047\057\057\060\051\062\060" +
    "\067\055\001\002\000\006\032\235\066\236\001\002\000" +
    "\022\031\056\033\052\034\073\036\047\057\057\060\051" +
    "\062\060\067\055\001\002\000\004\050\242\001\002\000" +
    "\004\066\240\001\002\000\004\050\241\001\002\000\036" +
    "\003\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\043" +
    "\uffbb\057\uffbb\060\uffbb\062\uffbb\065\uffbb\066\uffbb\067\uffbb" +
    "\071\uffbb\001\002\000\036\003\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\036\uffbc\043\uffbc\057\uffbc\060\uffbc\062\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\071\uffbc\001\002\000\004\066" +
    "\uffba\001\002\000\030\004\uffda\005\uffda\020\uffda\052\uffda" +
    "\054\uffda\055\uffda\056\uffda\061\uffda\062\uffda\063\uffda\074" +
    "\uffda\001\002\000\030\004\122\005\100\020\105\052\106" +
    "\054\107\055\117\056\123\061\110\062\060\063\121\074" +
    "\103\001\002\000\030\004\uffd9\005\uffd9\020\uffd9\052\uffd9" +
    "\054\uffd9\055\uffd9\056\uffd9\061\uffd9\062\uffd9\063\uffd9\074" +
    "\uffd9\001\002\000\004\053\uffbe\001\002\000\006\070\254" +
    "\072\251\001\002\000\004\051\272\001\002\000\004\073" +
    "\270\001\002\000\010\070\254\072\251\073\uffb7\001\002" +
    "\000\006\056\256\061\255\001\002\000\004\051\263\001" +
    "\002\000\004\051\257\001\002\000\022\031\056\033\052" +
    "\034\073\036\047\057\057\060\051\062\060\067\055\001" +
    "\002\000\004\071\261\001\002\000\004\050\262\001\002" +
    "\000\010\070\uffb6\072\uffb6\073\uffb6\001\002\000\022\031" +
    "\056\033\052\034\073\036\047\057\057\060\051\062\060" +
    "\067\055\001\002\000\004\071\265\001\002\000\004\050" +
    "\266\001\002\000\010\070\uffb5\072\uffb5\073\uffb5\001\002" +
    "\000\004\073\uffb8\001\002\000\004\050\271\001\002\000" +
    "\036\003\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9" +
    "\043\uffb9\057\uffb9\060\uffb9\062\uffb9\065\uffb9\066\uffb9\067" +
    "\uffb9\071\uffb9\001\002\000\022\031\056\033\052\034\073" +
    "\036\047\057\057\060\051\062\060\067\055\001\002\000" +
    "\004\071\274\001\002\000\004\050\275\001\002\000\010" +
    "\070\uffb4\072\uffb4\073\uffb4\001\002\000\004\064\277\001" +
    "\002\000\022\031\056\033\052\034\073\036\047\057\057" +
    "\060\051\062\060\067\055\001\002\000\004\065\301\001" +
    "\002\000\004\050\302\001\002\000\036\003\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\036\uffb3\043\uffb3\057\uffb3\060" +
    "\uffb3\062\uffb3\065\uffb3\066\uffb3\067\uffb3\071\uffb3\001\002" +
    "\000\006\003\305\062\225\001\002\000\004\053\uff92\001" +
    "\002\000\040\003\uff93\031\uff93\032\uff93\033\uff93\034\uff93" +
    "\036\uff93\043\uff93\053\311\057\uff93\060\uff93\062\uff93\065" +
    "\uff93\066\uff93\067\uff93\071\uff93\001\002\000\004\053\307" +
    "\001\002\000\004\050\310\001\002\000\036\003\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\036\uff95\043\uff95\057\uff95" +
    "\060\uff95\062\uff95\065\uff95\066\uff95\067\uff95\071\uff95\001" +
    "\002\000\004\050\312\001\002\000\036\003\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\036\uff94\043\uff94\057\uff94\060" +
    "\uff94\062\uff94\065\uff94\066\uff94\067\uff94\071\uff94\001\002" +
    "\000\042\003\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036" +
    "\uffc2\042\uffc2\043\uffc2\047\uffc2\057\uffc2\060\uffc2\062\uffc2" +
    "\065\uffc2\066\uffc2\067\uffc2\071\uffc2\001\002\000\042\003" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\042\uffc4" +
    "\043\uffc4\047\uffc4\057\uffc4\060\uffc4\062\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\071\uffc4\001\002\000\004\062\317\001\002" +
    "\000\004\050\uffaa\001\002\000\004\050\uffa9\001\002\000" +
    "\006\036\uffa2\041\uffa2\001\002\000\004\047\uffab\001\002" +
    "\000\004\036\uffa3\001\002\000\006\046\330\051\331\001" +
    "\002\000\004\050\326\001\002\000\006\036\uffa7\041\uffa7" +
    "\001\002\000\010\036\uffa6\041\uffa6\062\323\001\002\000" +
    "\006\036\uffa5\041\uffa5\001\002\000\004\062\323\001\002" +
    "\000\016\003\332\024\026\025\022\026\024\027\027\030" +
    "\025\001\002\000\004\050\ufffb\001\002\000\004\050\ufffc" +
    "\001\002\000\004\050\ufffd\001\002\000\004\047\336\001" +
    "\002\000\004\002\uff96\001\002\000\004\050\340\001\002" +
    "\000\010\036\uffa8\041\uffa8\044\012\001\002\000\004\047" +
    "\342\001\002\000\004\002\uff97\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\004\042\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\012\024\334\001\001\000\006\011\012\024\013\001" +
    "\001\000\006\003\323\013\324\001\001\000\010\012\016" +
    "\014\015\015\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\321\014\015\015\017\001\001\000\004" +
    "\040\320\001\001\000\006\011\044\025\043\001\001\000" +
    "\004\016\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\032\016\034\022\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\037\016\034\022\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\045\001\001\000\004\060\315\001" +
    "\001\000\036\017\052\027\070\035\063\036\074\037\066" +
    "\040\071\041\047\043\065\045\061\046\064\047\067\050" +
    "\073\054\060\056\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\115\023\100\026\114\027\117\031" +
    "\275\032\110\033\112\034\111\043\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\017\052\027" +
    "\070\035\063\036\074\037\066\040\071\041\200\043\065" +
    "\045\061\046\064\047\067\050\073\054\060\056\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\115\023\100\026\114\027\117\031" +
    "\103\032\110\033\112\034\111\043\113\052\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\100" +
    "\026\114\027\117\034\151\043\113\001\001\000\024\002" +
    "\115\023\100\026\114\027\117\031\147\032\110\033\112" +
    "\034\111\043\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\143\006\142\001\001\000\002\001\001" +
    "\000\004\005\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\023\100\026\114\027\117\033\123\034\111" +
    "\043\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\023\100\026\114" +
    "\027\117\034\131\043\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\115\023\100\026\114" +
    "\027\117\032\146\033\112\034\111\043\113\001\001\000" +
    "\016\023\100\026\114\027\117\033\145\034\111\043\113" +
    "\001\001\000\002\001\001\000\004\005\130\001\001\000" +
    "\004\004\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\115\023" +
    "\100\026\114\027\117\031\154\032\110\033\112\034\111" +
    "\043\113\053\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\017\052\027\070\035\063\036\074\037\066" +
    "\040\071\041\157\043\065\045\061\046\064\047\067\050" +
    "\073\054\060\056\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\115\023\100\026" +
    "\114\027\117\031\173\032\110\033\112\034\111\043\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\115\023\100\026\114\027\117\031\166\032\110\033\112" +
    "\034\111\043\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\115\023\100\026\114\027\117\031\171" +
    "\032\110\033\112\034\111\043\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\115\023\100\026\114\027\117" +
    "\031\202\032\110\033\112\034\111\043\113\044\203\063" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\115\023\100\026\114" +
    "\027\117\031\202\032\110\033\112\034\111\043\113\044" +
    "\203\063\212\001\001\000\002\001\001\000\006\023\214" +
    "\057\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\115\023\100" +
    "\026\114\027\117\031\227\032\110\033\112\034\111\043" +
    "\113\061\231\062\230\001\001\000\002\001\001\000\004" +
    "\030\244\001\001\000\002\001\001\000\036\017\052\027" +
    "\070\035\063\036\074\037\066\040\071\041\233\043\065" +
    "\045\061\046\064\047\067\050\073\054\060\056\062\001" +
    "\001\000\004\051\236\001\001\000\036\017\052\027\070" +
    "\035\063\036\074\037\066\040\071\041\242\043\065\045" +
    "\061\046\064\047\067\050\073\054\060\056\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\115\023\100\026\114\027\117\031" +
    "\227\032\110\033\112\034\111\043\113\061\246\062\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\251\021\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\266\021\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\017\052\027\070" +
    "\035\063\036\074\037\066\040\071\041\257\043\065\045" +
    "\061\046\064\047\067\050\073\054\060\056\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\017\052\027\070\035\063\036\074\037\066\040\071" +
    "\041\263\043\065\045\061\046\064\047\067\050\073\054" +
    "\060\056\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\017\052\027\070\035\063\036\074" +
    "\037\066\040\071\041\272\043\065\045\061\046\064\047" +
    "\067\050\073\054\060\056\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\017\052\027\070\035\063\036\074\037\066\040\071" +
    "\041\277\043\065\045\061\046\064\047\067\050\073\054" +
    "\060\056\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\303\055\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\323\013\326\001" +
    "\001\000\002\001\001\000\004\003\333\001\001\000\006" +
    "\016\034\022\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\012\024\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s) {
       if (!s.value.equals(""))
            report_error("Sintáctico en la", s);
    }

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error ");
        m.append(message);
        java_cup.runtime.Symbol s = null;
        if (info instanceof java_cup.runtime.Symbol) {
            s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" linea " + (s.left + 1));

                if (s.right >= 0) {
                    m.append(", columna " + (s.right + 1));
                }
            }
            if (!s.value.equals(""))
            {
                m.append(". No se esperaba el símbolo: '" + s.value + "'");


            
             }
        }
         System.err.println(m);
    }


    public void report_fatal_error(String message, Object info) {
        String msj_fatal = ", no se esperaba fin de archivo.";
        report_error(msj_fatal, info);

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser1$actions {
  private final parser1 parser;

  /** Constructor */
  CUP$parser1$actions(parser1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action_part00000000(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser1$result;

      /* select the action based on the action number */
      switch (CUP$parser1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = start_val;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser1$parser.done_parsing();
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // signo ::= MAS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("signo",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // signo ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("signo",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // integer_sin_signo ::= NUM 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("integer_sin_signo",20, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_variable ::= ID COMA declaracion_variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_variable ::= ID DOSPUNTOS tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_variable ::= ID DOSPUNTOS error 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= expresion_simple 
            {
              Object RESULT =null;
		int e_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object e_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= expresion_simple operador_relacional expresion_simple 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion_simple ::= termino 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_simple",24, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion_simple ::= expresion_simple operador_suma termino 
            {
              Object RESULT =null;
		int e_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int e_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object e_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int o_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int o_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object o_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_simple",24, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion_simple ::= signo termino 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_simple",24, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // termino ::= factor 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("termino",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // termino ::= termino operador_multiplicacion factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("termino",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // factor ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // factor ::= integer_sin_signo 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // factor ::= llamada_funcion 
            {
              Object RESULT =null;
		int l_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int l_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object l_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // factor ::= NUM_FLOAT 
            {
              Object RESULT =null;
		int n_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int n_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object n_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cadena ::= T_STRING 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("cadena",17, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cadena ::= T_CHAR 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("cadena",17, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operador_suma ::= MAS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_suma",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operador_suma ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_suma",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operador_multiplicacion ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador_multiplicacion ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador_multiplicacion ::= DIV 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operador_multiplicacion ::= MOD 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operador_relacional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operador_relacional ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operador_relacional ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operador_relacional ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operador_relacional ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operador_relacional ::= IN 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_relacional",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operador_condicional ::= AND 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_condicional",22, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operador_condicional ::= OR 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("operador_condicional",22, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamada_funcion ::= ID PARIZQ PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_funcion",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamada_funcion ::= ID PARIZQ parametros PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_funcion",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // llamada_funcion ::= ID PARIZQ parametros error PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("llamada_funcion",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= parametro_actual COMA parametros 
            {
              String RESULT =null;
		int p_aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int p_aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object p_a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametros",49, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= parametro_actual 
            {
              String RESULT =null;
		int p_aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int p_aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object p_a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametros",49, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= sentencia_simple 
            {
              Object RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= sentencia_estructurada 
            {
              Object RESULT =null;
		int s_eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s_e = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_simple ::= asignacion_sentencia 
            {
              Object RESULT =null;
		int a_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int a_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object a_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia_simple ::= llamada_funcion PUNTOCOMA 
            {
              Object RESULT =null;
		int l_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int l_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object l_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia_simple ::= lectura_sentencia 
            {
              Object RESULT =null;
		int l_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int l_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object l_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia_simple ::= escritura_sentencia 
            {
              Object RESULT =null;
		int e_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object e_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_simple",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion_sentencia ::= variable ASIGNACION expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion_sentencia ::= variable ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignacion_sentencia ::= variable IGUAL error expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion_sentencia ::= variable DOSPUNTOS error expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("asignacion_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_estructurada ::= sentencia_compuesta 
            {
              Object RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s_c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_estructurada ::= if_sentencia 
            {
              Object RESULT =null;
		int i_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int i_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object i_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia_estructurada ::= while_sentencia 
            {
              Object RESULT =null;
		int w_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int w_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object w_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_estructurada ::= for_sentencia 
            {
              Object RESULT =null;
		int f_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int f_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object f_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_estructurada ::= switch_sentecia 
            {
              Object RESULT =null;
		int sw_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sw_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object sw_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_estructurada",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_compuesta ::= BEGIN seccion_sentencia END 
            {
              Object RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object s_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_compuesta ::= BEGIN END 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_compuesta ::= BEGIN seccion_sentencia error 
            {
              Object RESULT =null;
		int s_sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object s_s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // seccion_sentencia ::= sentencia seccion_sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_sentencia",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // seccion_sentencia ::= sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("seccion_sentencia",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_if ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresion_if",48, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresiones_if ::= expresion_if operador_condicional expresiones_if 
            {
              Object RESULT =null;
		int ex_ifleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int ex_ifright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object ex_if = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresiones_if",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresiones_if ::= expresion_if 
            {
              Object RESULT =null;
		int ex_ifleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int ex_ifright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object ex_if = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("expresiones_if",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_sentencia ::= IF PARIZQ expresiones_if PARDER seccion_sentencia ENDIF PUNTOCOMA 
            {
              Object RESULT =null;
		int exp_ifleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int exp_ifright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object exp_if = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("if_sentencia",36, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_sentencia ::= IF PARIZQ expresiones_if PARDER seccion_sentencia parte_else ENDIF PUNTOCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int p_eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int p_eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object p_e = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("if_sentencia",36, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parte_else ::= ELSE seccion_sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_else",39, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // switch_sentecia ::= SWITCH ID switch_cases ENDSWITCH PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_sentecia",13, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // switch_cases ::= switch_case switch_cases 
            {
              Object RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object s_c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_cases",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // switch_cases ::= switch_case 
            {
              Object RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s_c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_cases",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // switch_case ::= CASE T_CHAR DOSPUNTOS seccion_sentencia BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_case",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // switch_case ::= CASE NUM DOSPUNTOS seccion_sentencia BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_case",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // switch_case ::= DEFAULT DOSPUNTOS seccion_sentencia BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("switch_case",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // while_sentencia ::= WHILE expresion LOOP seccion_sentencia ENDLOOP PUNTOCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("while_sentencia",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_sentencia ::= FOR ID IN valor_inicial hasta valor_final LOOP seccion_sentencia ENDLOOP PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-8)).value;
		int v_ileft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)).left;
		int v_iright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)).right;
		Object v_i = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-6)).value;
		int v_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int v_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object v_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("for_sentencia",38, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // hasta ::= TO 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("hasta",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_inicial ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("valor_inicial",40, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_final ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("valor_final",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // grupo_parametros ::= tipo ID COMA grupo_parametros 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("grupo_parametros",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // grupo_parametros ::= tipo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("grupo_parametros",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametro_actual ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parametro_actual",34, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bloque ::= parte_declaracion_variable parte_declaracion_funciones sentencia_compuesta 
            {
              Object RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s_c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("bloque",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bloque_f ::= parte_declaracion_variable sentencia_compuesta retorno 
            {
              Object RESULT =null;
		int s_cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int s_cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object s_c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("bloque_f",19, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // retorno ::= RETURN ID 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("retorno",46, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parte_declaracion_variable ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_variable",7, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parte_declaracion_variable ::= VAR declaracion_var 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_variable",7, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracion_var ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_var",9, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracion_var ::= declaracion_variable PUNTOCOMA declaracion_var 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_var",9, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parte_declaracion_funciones ::= 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_funciones",8, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parte_declaracion_funciones ::= declaracion_funcion parte_declaracion_funciones 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parte_declaracion_funciones",8, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracion_funcion ::= encabezamiento_funcion bloque_f PUNTOCOMA 
            {
              Object RESULT =null;
		int e_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int e_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object e_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int b_fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int b_fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object b_f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",10, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // encabezamiento_funcion ::= FUNCTION tipo_primitivo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_funcion",11, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // encabezamiento_funcion ::= FUNCTION tipo_primitivo ID PARIZQ grupo_parametros PARDER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_funcion",11, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // encabezamiento_funcion ::= FUNCTION ID error PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("encabezamiento_funcion",11, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tipo ::= tipo_primitivo 
            {
              Object RESULT =null;
		int t_primleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int t_primright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object t_prim = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tipo_primitivo ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tipo_primitivo ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipo_primitivo ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipo_primitivo ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipo_primitivo ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // programa ::= PROGRAM ID PUNTOCOMA bloque PUNTO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("programa",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // programa ::= error ID PUNTOCOMA bloque PUNTO 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("programa",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // programa ::= PROGRAM ID error bloque PUNTO 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("programa",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lectura_sentencia ::= READ PARIZQ lectura PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int lectleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int lectright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object lect = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura_sentencia",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lectura_sentencia ::= READ PARIZQ error PARDER PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura_sentencia",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lectura_sentencia ::= READ PARIZQ error 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura_sentencia",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lectura ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lectura",43, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // escritura_sentencia ::= WRITE PARIZQ escritura PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int escleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int escright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object esc = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura_sentencia",44, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // escritura_sentencia ::= WRITE PARIZQ error PARDER PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura_sentencia",44, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // escritura ::= cadena COMA variable 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura",45, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // escritura ::= cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("escritura",45, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser1$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
              return CUP$parser1$do_action_part00000000(
                               CUP$parser1$act_num,
                               CUP$parser1$parser,
                               CUP$parser1$stack,
                               CUP$parser1$top);
    }
}

}
